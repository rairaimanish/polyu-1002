def total_distance_across_locations():
    cords = []
    line = input()
    ans = 0
    while(line != "end"):
        cords.append(line.split(','))
        line = input()
    for i in range(len(cords)-1):
        x = (float(cords[i][1])-float(cords[i+1][1]))**2
        y = (float(cords[i][2])-float(cords[i+1][2]))**2
        ans += (x+y)**0.5
        print( "({}->{}:{:.2f})".format(cords[i][0],cords[i+1][0], (x+y)**0.5))
        #{:.2f} <= 2 decimal place
    for i in range(len(cords)):
        if i != len(cords):
            print(cords[i][0]+'->', end = "")
        else:
            print(cords[i][0]+':', end = "")
    print("{:.2f}".format(ans))

def long_time_no_c():
    s = input()
    last_visit = 0
    greatest_visit = 0
    hasC = 0
    for i in s:
        if i == 'c' or i == 'C':
            hasC = 1
            if last_visit > greatest_visit:
                greatest_visit = last_visit
            last_visit = 0
        else:
            last_visit += 1
    
    if(greatest_visit == 0 and hasC == 0):
        print("Really long time no C")
    else: 
        if last_visit > greatest_visit:
                greatest_visit = last_visit
        print(greatest_visit)

def mean_normalization():
    t = eval(input())
    max = t[0]
    min = t[0]
    sum = 0
    for i in t:
        if(i > max):
            max = i
        elif(i < min):
            min = i
        sum += i

    mean = sum/len(t)
    ans = ""
    for i in t:
        ans += "{:.3f},".format((i-mean)/(max-min))
    print(ans[:-1])


def histogram():
    s = input()
    vowels = ('a','e','i','o','u')
    vowel_count = {'a':0,'e': 0,'i':0,'o':0,'u':0 }
    for i in s:
        if i in vowels:
            vowel_count[i] +=1 
    greatest = 0
    for i in vowel_count.values():
        if i > greatest:
            greatest = i
    
    for i in range(greatest,0,-1):
        for j in vowel_count.values():
            if(j) >= i:
                print("  *", end = "")
            else:
                print("   ", end = "")
        print("")
    print("=================\n{:>3}{:>3}{:>3}{:>3}{:>3}".format('a','e','i','o','u'))


def what_do_you_mean():
    phone_number = input()
    nw = phone_number.split('0')
    s = ""
    dt = {}
    charkey = {'a':2, 'b':2, 'c':2, 'd': 3, 'e':3, 'f':3, 'g':4,'h':4, 'i':4,'j':5,'k':5,'l':5,'m':6,'n':6,'o':6,'p':7,'q':7,'r':7,'s':7,'t':8,'u':8,'v':8,'w':9,'x':9,'y':9,'z':9,}
    x = input()
    while (x != "***"):
        s += x + " "
        x = input()
    k = s.split()
    for i in k:
        num = ""
        for c in i:
            num  += str(charkey[c])
        dt[i] = num


    ans = ""
    for i in nw:
        anscount = 0
        for j in dt.keys():
            if dt[j] == i:
                anscount+= 1
                ans += j + " "
        if anscount > 1:
            
            break
    if(anscount > 1):
        print("more than one answer")
    elif len(ans) == 0:
        print("cannot be found")
    else:
        print(ans[:-1])


def a_moving_mouse():
    mx,my = 2,2
    directions = input()
    for i in directions:
        if(i == 'E'):
            if(mx + 1 > 9):
                mx = 0
            else:
                mx += 1
        elif(i == 'W'):
            if(mx - 1 < 0):
                mx = 9
            else:
                mx -= 1
        elif (i == "N"):
            if(my - 1 < 0):
                my = 9
            else:
                my -= 1
        elif (i == "S"):
            if(my + 1 > 9):
                my = 0
            else:
                my += 1
    for i in range(10):
        for j in range(10):
            if(j == mx and i == my):
                print("M",end ="")
            else:
                print("*", end="")
        print('')

def pc_performance():
    s = input()
    l = []
    idx = 0
    ridx = 0
    ratio = 0
    while (s!= "-1"):
        l.append(s.split())
        s = input()
    
    for i in l:
        r = (float(i[0]) + float(i[1]) + float(i[2]))/float(i[3])
        if r > ratio:
            ratio = r
            ridx = idx
        idx += 1

    print("{} {} {} {}".format(l[ridx][0],l[ridx][1],l[ridx][2],l[ridx][3]))
    score = int(l[ridx][0])+int(l[ridx][1])+int(l[ridx][2])
    for i in l:
        if (int(i[0])+int(i[1])+int(i[2]))> score:
            print(i[0],i[1],i[2],i[3])

def helper(a,b):
    answer = ""
    if(a < 0 and b< 0):
        a *= -1
        b *= -1
    if(a > 0 and b>0):
        if(b == 1):
            answer += "({})".format(a)
        else:
            answer += "({}/{})".format(a,b)
    elif(a>0 and b<0):
        b *= -1
        if(b == 1):
            answer += "(-{})".format(a)
        else:
            answer += "(-{}/{})".format(a,b)
    elif(a<0 and b>0):
        a *= -1
        if(b == 1):
            answer += "(-{})".format(a)
        else:
            answer += "(-{}/{})".format(a,b)
    return answer

def simplify(x,y):
    a,b= x,y
    if(a<0):
        a *= -1
    if(b<0):
        b *= -1
    mn = min(a,b)
    for i in range(2,mn):
        if(x%i == 0 and y%i == 0):
            a = (x//i)
            b = (y//i)
    return a,b

def fraction_numbers_multiplication():
    a,b,c,d = map(int,input().split(','))
    x,y = a*c, b*d
    e,f = simplify(x,y)
    print("{} x {} = {}".format(helper(a,b),helper(c,d),helper(e,f)))

import math
def are_you_confused():
    s = input()
    n = int(input())
    l = []
    s_length = len(s)
    k = math.ceil(s_length/n)

    for i in range(k):
        for j in range(n):
            l.append(0)
    index = 0
    for j in (range(n)):
        for i in range(k):
            if((i*n)+j+1<=s_length):
                l[(i*n)+j] = s[index]
                index += 1
    for i in range(s_length):
        print(l[i],end="")
#Oyo  eoece nn nop   rso etfteiwaesur ouhosr tatow sep is g wacerlttemei
are_you_confused()

#H deW!lolrol
